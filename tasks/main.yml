---
- name: Add wireguard ppa (Ubuntu)
  apt_repository:
    repo: 'ppa:wireguard/wireguard'
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version|int < 20

- name: Install linux headers (Ubuntu)
  apt:
    update_cache: yes
    state: present
    name: linux-headers-generic
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version|int < 20

- name: Add unstable repository (Debian)
  copy:
    src: templates/unstable.list
    dest: /etc/apt/sources.list.d/unstable.list
  when:
    - ansible_distribution == "Debian" and debian_enable_testing

- name: Pin packages (Debian)
  copy:
    src: templates/limit-unstable
    dest: /etc/apt/preferences.d/limit-unstable
  when:
    - ansible_distribution == "Debian" and debian_pin_packages

- name: Get kernel version (Debian)
  command: uname -r
  register: kernel
  when:
    - ansible_distribution == "Debian"

- name: Install kernel headers (Debian)
  apt:
    state: present
    update_cache: true
    name: linux-headers-{{ kernel.stdout }}
  when:
    - ansible_distribution == "Debian"

- name: Install wireguard (apt)
  apt:
    update_cache: yes
    state: present
    name: wireguard
  when:
    - ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

- name: Install wireguard (pacman)
  pacman:
    name:
      - wireguard-dkms
      - wireguard-tools
    state: present
  when:
    - ansible_distribution == "Archlinux"

- name: Read private key
  stat:
    path: "{{ wireguard_path }}/privatekey"
  register: privatekey

- name: "Ensure {{ wireguard_path }} (wireguard_path) exists"
  file:
    path: "{{ wireguard_path }}"
    state: directory
    mode: 0700

- name: Generate wireguard keys
  shell: "umask 077; wg genkey | tee {{ wireguard_path  }}/privatekey | wg pubkey > {{ wireguard_path }}/publickey"
  when: not privatekey.stat.exists

- name: Read private key
  slurp:
    src: "{{ wireguard_path }}/privatekey"
  register: private

- name: Read public key
  slurp:
    src: "{{ wireguard_path }}/publickey"
  register: public

- name: Ensure qrencode in installed
  apt:
    pkg: qrencode
    state: present
  when: clients | length > 0

# do we need this?  I don't think so, because we use 'creates:' below.
- name: Read private client's key
  stat:
    path: "{{ wireguard_path }}/{{ item.name }}.privatekey"
  loop: "{{ clients }}"
  register: client_privatekey

- name: Generate wireguard client's keys
  shell: "umask 077; wg genkey | tee {{ wireguard_path  }}/{{ item.name }}.privatekey | wg pubkey > {{ wireguard_path }}/{{ item.name }}.publickey"
  args:
    creates: "{{ wireguard_path }}/{{ item.name }}.privatekey"
  #run_once: true
  loop: "{{ clients }}"

- name: Read private client's key
  slurp:
    src: "{{ wireguard_path }}/{{ item.name }}.privatekey"
  loop: "{{ clients }}"
  register: client_privatekeys
  tags: ["dbg"]
#  run_once: true
#  when: clients | length > 0

- name: Read public client's key
  slurp:
    src: "{{ wireguard_path }}/{{ item.name}}.publickey"
  loop: "{{ clients }}"
  register: client_publickeys
  tags: ["dbg"]
#  run_once: true
#  when: clients | length > 0

#- name: Set client privkey facts
#  set_fact:
#    client_private_keys: client_private_keys
- name: prepare key data
  set_fact:
    client_keydata: "{{ lookup('together', client_publickeys.results, client_privatekeys.results) }}"
  tags: ["dbg"]

#

#- name: tmp
#  debug: var=item
#  with_together:
#    - "{{ client_publickeys.results }}"
#    - "{{ client_privatekeys.results }}"
#  register: client_keydata
#  tags: ["dbg"]

- name: "Ensure local client-config dir exists: {{ client_wireguard_path }}"
  file:
    path: "{{ client_wireguard_path }}"
    state: directory
    mode: 0700
  run_once: true
  vars:
    ansible_connection: local
  delegate_to: localhost
  become: false
  when: clients | length > 0

- name: Generate configs
  template:
    src: interface.conf.j2
    dest: "{{ wireguard_path }}/{{ wireguard_network_name }}.conf"
    owner: root
    group: root
    mode: "u=rw,g=r,o="
  register: config

- name: Ensure client config directory structure exists
  file:
    path: "{{ client_wireguard_path }}/{{ item.0.item.name }}"
    mode: 0700
    state: directory
  loop: "{{ client_keydata }}"
  delegate_to: localhost
  run_once: true

# because in the client-config template, template, inventory_hostname=localhost
- name: Set vpn_server_host fact for clients
  set_fact:
    vpn_server_host: "{{ inventory_hostname }}"

#- name: deeebug
#  debug: var=vars
#  tags: ["bork"]

- name: Generate client's config
  template:
    src: client.conf.j2
    dest: "{{ client_wireguard_path }}/{{ item.0.item.name }}/{{ inventory_hostname }}{{ client_config_file_suffix }}.conf"
    mode: 0600
#  vars:
#    ansible_connection: local
  become: no
  loop: "{{ client_keydata }}"
  when: '"ingress" in group_names'
  delegate_to: localhost
  tags: ["dbg"]

- name: Ensure IP forwarding is enabled
  sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: yes
    reload: yes
  loop:
    - net.ipv4.ip_forward
    - net.ipv6.conf.all.forwarding
    - net.ipv4.conf.all.proxy_arp
  when: '"egress" in groups'

- name: Start and enable wg-quick systemd service
  systemd:
    name: "wg-quick@{{ wireguard_network_name }}"
    enabled: yes
    state: started

- name: Restart wg-quick service if required
  systemd:
    name: "wg-quick@{{ wireguard_network_name }}"
    state: restarted
  when: config.changed
